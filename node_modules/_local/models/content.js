var _ = require('lodash');
var mongoose = require('mongoose');
var jade = require('jade');
var fs = require('fs');
var pathUtil = require('path');


var outputContentToFile = function(hook, next) {
  var record = _.clone(hook.result._doc);
  record.pretty = false;
  var templatePath = __dirname+'/../../../frontend/views/content.jade';
  var html = jade.renderFile(templatePath, record);
  var outputFileName = pathUtil.join(__dirname+'/../../../frontend/built/', record.relPath, '/index.html');
  fs.writeFile(outputFileName, html, function(err) {
      if(err) {
          return console.log(err);
      }
  });
  next();
};


var schema = {
  schema: {
    name: {
      type: String,
      required: '{PATH} is required!',
    },
    relPath: {
      type: String,
      required: '{PATH} is required!',
      index: { unique: true },
    },
    type: {
      type: String,
      default: 'news',
      enum: ['news'],
    },
    fields: {
      type: mongoose.Schema.Types.Mixed,
      default: {},
    },
    updated_at: {
      type: Date,
      default: new Date(),
    },
    created_at: {
      type: Date,
      default: new Date(),
    },
  },
  methods: {
  },
  statics: {
  },
  virtuals: {
  },
  indexes: [
  ],
  // Hooks
  before:{
    //all: [outputContentToFile],
    //find: [outputContentToFile],
    //get: [authHooks.queryWithUserId],
    // These will be executed in the order listed
    //create: [authHooks.setUserId, hooks.log],
    //update: [outputContentToFile],
    //patch: [outputContentToFile],
    //remove: [authHooks.setUserId]
  },
  after:{
    //all: [],
    //find: [hooks.log],
    //get: [],
    create: [outputContentToFile],
    update: [outputContentToFile],
    patch: [outputContentToFile],
    //remove: []
  },

  //add custom endpoints here, see https://github.com/feathersjs/feathers/pull/91
  /*_setup: function(app, path) {
    var self = this;
    var model = this.model

    //Count - mostly taken from find, used to get the total count of a query.
    app.get('/' + path + '/count', function(req, res, next) {
      console.log('here');
      feathersCount(self, model, req, res, next);
    });
  }*/
};
module.exports = schema;

/*
var schema = mongoose.Schema({
  name: {
    type: String,
    required: '{PATH} is required!',
  },
  relPath: {
    type: String,
    required: '{PATH} is required!',
    index: { unique: true },
  },
  type: {
    type: String,
    default: 'User',
    enum: ['news'],
  },
  fields: {
    type: mongoose.Schema.Types.Mixed,
    default: {},
  },
  updated_at: {
    type: Date,
    default: new Date(),
  },
  created_at: {
    type: Date,
    default: new Date(),
  },
});


schema.pre('save', function(next) {
  var that = this;
  that.updated_at = _.isUndefined(that.created_at) ? that._id.getTimestamp() : new Date();
  if (!that.created_at)
    that.created_at = that._id.getTimestamp();
  next();
});

module.exports = mongoose.model('Content', schema);

*/
