
var async = require('async');
var loaderUtil = require('loader-utils');
var pathUtil = require('path');
var jade = require('jade');
var RawSource = require("webpack/lib/RawSource");
var NullDependency = require("webpack/lib/dependencies/NullDependency");

//ensure that mongo is connected using env variables
/*var mongoose = require('_local/utils/mongoose');
var contentSchema = require('_local/models/content');
var mongooseService = require('feathers-mongoose');
var contentService = mongooseService('content', contentSchema, {connection: mongoose});\
*/
var mongoose = require('_local/utils/mongoose');
var contentService = require('_local/services/content');

//Template Pre-Compile
var templatePath = __dirname+'/../../frontend/views/content.jade';
//this.addDependency(templatePath);
var template = jade.compileFile(templatePath, {pretty: false});

function contentPlugin(options) {
  // Configure your plugin with options...
}

contentPlugin.prototype.apply = function(compiler) {

  //from: https://github.com/webpack/webpack/blob/9f440e30ecac00bfc27b91d372a969d3414d194c/lib/SingleEntryPlugin.js
  /*compiler.plugin("make", function(compilation, callback) {
    var dep = new NullDependency();
    dep.loc = templatePath;
    compilation.addEntry(this.context, dep, this.name, callback);
  });*/

  //The Compiler begins with emitting the generated assets.
  //Here plugins have the last chance to add assets to the compiler.assets array.
  compiler.plugin("emit", function(compilation, callback) {
    console.log("The compilation is going to emit files...");
    console.log(compiler.assets);
    var count = 0;
    async.waterfall([
      function getAllContent(done) {
        contentService.find({}, done);
      },
      function processContent(results, done) {
        async.eachSeries(results, function(item, itemDone) {
          if(typeof item.relPath !== 'undefined') {
            var outputFileName = pathUtil.join(item.relPath, '/index.html')
              .replace(/^(\/|\\)/, ''); // Remove leading slashes for webpack-dev-server
            var content = template(item);
            //self.emitFile(outputFileName, content);
            compilation.assets[outputFileName] = new RawSource(content);
            count++;
          }
          itemDone();
        }, done);
      }
    ], function allDone(err) {
      if(err) console.log(err);
      console.log('Content Processed', count);
      callback();
    });
  });

  compiler.plugin("done", function(compilation) {
    if(pathUtil.basename(process.title) !== 'dev-frontend') {
      //when we are all done, disconnect mongoose
      mongoose.connection.close(function () {
        console.info('Webpacks use of mongoose disconnected');
      });
    } else {
      console.info('Not restarting mongoose because this is the dev server');
    }

  });
};

module.exports = contentPlugin;
