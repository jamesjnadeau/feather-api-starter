var async = require('async');
var loaderUtil = require('loader-utils');
var pathUtil = require('path');
var jade = require('jade');

//ensure that mongo is connected using env variables
var mongoose = require('./utils/mongoose');
var contentSchema = require('./models/content');
var mongooseService = require('feathers-mongoose');
var contentService = mongooseService('content', contentSchema);

module.exports = function(source) {
  var self = this;
  //declare as cacheable
  self.cacheable();
  //declare as async and save function call for later
  var callback = self.async();
  var templatePath = __dirname+'/../../frontend/views/content.jade';
  this.addDependency(templatePath);
  var template = jade.compileFile(templatePath, {pretty: false});

  if(typeof self.emitFile === 'undefined') {
    //Not running from webpack, we need to define our own emitFile function to use later
    var webpackConfig = require('../webpack.config.js')[1];
    var buildPath = webpackConfig.output.path;
    self.emitFile = function(outputFileName, content) {
      var output_path = pathUtil.join(buildPath, outputFileName);
      console.log('output path', output_path);
      fs.writeSync(output_path, content);
    };
  }

  async.waterfall([
    function getContent(done) {
      contentService.find({}, done);
    },
    function processContent(results, done) {
      async.eachSeries(results, function(item, itemDone) {
        if(typeof item.urlPath !== 'undefined') {
          var outputFileName = pathUtil.join(item.urlPath, '/index.html')
            .replace(/^(\/|\\)/, ''); // Remove leading slashes for webpack-dev-server
          //set any locals we might need
          item.API_URL = process.env.API_URL || false;
          var content = template(item);
          self.emitFile(outputFileName, content);
        }
        itemDone();
      }, done);
    }
  ], function allDone(err) {
    if(err) console.log(err);
    console.log('Content Process Done')
    //when we are all done, disconnect mongoose
    //console.log('disconnecting mongoose');
    //connection.disconnect();
    callback(null, source);
  });


};
