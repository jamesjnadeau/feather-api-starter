#!/usr/bin/env node
/**
 * Load any local environment variables
 */
require('dotenv').load();

/**
 * Module dependencies.
 */
var app = require('../api/app.js');
var debug = require('debug')('api');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var normalizeUtil = require('_local/utils/normalize');
var port = normalizeUtil().port(process.env.API_PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Ensure graceful shutdown
 */
process.on('SIGTERM', function () {
  server.close(function () {
    process.exit(0);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
app.boot(function(err) {
  if (err) { throw err; }
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
